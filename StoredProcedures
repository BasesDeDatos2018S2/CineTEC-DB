--STORED PROCEDURES
----------------------------------------------------------------------------------------------
--STORED PROCEDURE BILLS
----------------------------------------------------------------------------------------------
CREATE FUNCTION usp_bills(id_bill integer)
RETURNS TABLE(Id_Bill INT, Date_Bill DATE, Quantity_Tikets INT, Id_client INT, Hour_Movie TIME, Date_Movie DATE, Movie_Price INT, Name_Original_Movie VARCHAR, Name_Traduced_Movie VARCHAR, Total_Price INT)
LANGUAGE SQL
AS $$
	SELECT B.Id, B.Date, B.Quantity, B.Id_client, P.Hour, P.Date, P.Price, M.Original_name, M.Traduced_name, (B.Quantity * P.Price)
	FROM Bill AS B
		INNER JOIN Projection AS P ON P.Id = B.Id_projection
		INNER JOIN Movie AS M ON M.Id = P.Id_movie
	WHERE id_bill = B.Id
$$;

--Drop Function usp_bills
--Select * from usp_bills(1)

----------------------------------------------------------------------------------------------
--STORED PROCEDURE MOVIES PER CINE 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE FUNCTION usp_movie_per_theater(movie_theater integer)
RETURNS TABLE(Id INT, Billboard_status BOOLEAN, Original_name VARCHAR, Traduced_name VARCHAR, Duration INT, Director VARCHAR, Clasification VARCHAR, Image VARCHAR)
LANGUAGE SQL
AS $$
	SELECT DISTINCT M.Id, M.Billboard_status, M.Original_name, M.Traduced_name, M.Duration, M.Director, MC.Clasification, M.Image
	FROM Movie as M
		INNER JOIN Movie_Clasification AS MC ON MC.Id = M.Id_clasification
		INNER JOIN Projection AS P ON P.Id_movie_room = M.Id
		INNER JOIN Movie_Room AS MR ON MR.Id = P.Id_movie_room
		INNER JOIN Movie_Theater as MT ON MT.Id = MR.Id_movie_theater
	Where (MT.Id = movie_theater) AND (M.Billboard_status = TRUE) 
$$;
--Drop Function usp_movie_per_theater
--Select * from usp_movie_per_theater(1)


----------------------------------------------------------------------------------------------
--STORED PROCEDURE SEATS OF A PROJECTION
----------------------------------------------------------------------------------------------
CREATE FUNCTION usp_seats_projection(projection integer)
RETURNS TABLE(Seats_id INT, Seat_row INT, Seat_column INT)
LANGUAGE SQL
AS $$
	SELECT SR.Id_Seat, S.Rows, S.Columns
	FROM Seat_Reservation AS SR
	INNER JOIN Projection AS P ON P.Id = SR.Id_projection
	INNER JOIN Seat AS S ON S.Id = SR.Id_seat 
	WHERE SR.Id_projection = projection
$$;
--Drop Function usp_seats_projection
--Select * from usp_seats_projection(1)


----------------------------------------------------------------------------------------------
--STORED PROCEDURE ACTORS PER MOVIE
----------------------------------------------------------------------------------------------
CREATE FUNCTION usp_actors_movie(movie integer)
RETURNS TABLE(Id INT, Name VARCHAR, Lastname VARCHAR)
LANGUAGE SQL
AS $$
	SELECT A.Id, A.Name, A.Lastname
	FROM Movie as M
	INNER JOIN Actors_Movie AS AM ON AM.Id_movie = M.Id
	INNER JOIN Actors as A ON A.Id = AM.Id_actor
	WHERE M.Id = movie
$$;
--Drop Function usp_actors_movie
--Select * from usp_actors_movie(1)

----------------------------------------------------------------------------------------------
--STORED PROCEDURE MOVIE
----------------------------------------------------------------------------------------------
CREATE FUNCTION usp_movie()
RETURNS TABLE(Id INT, Billboard_status BOOLEAN, Original_name VARCHAR, Traduced_name VARCHAR, Duration INT, Director VARCHAR, Clasification VARCHAR, Image VARCHAR)
LANGUAGE SQL
AS $$
	SELECT M.Id, M.Billboard_status, M.Original_name, M.Traduced_name, M.Duration, M.Director, MC.Clasification, M.Image
	FROM Movie as M
	INNER JOIN Movie_Clasification AS MC ON MC.Id = M.Id_clasification
	ORDER BY M.Id
$$;
--Drop Function usp_movie
--Select * from usp_movie()

----------------------------------------------------------------------------------------------
--STORED PROCEDURE MOVIE_ROOMS
----------------------------------------------------------------------------------------------
CREATE FUNCTION usp_movie_room(movie_theater integer)
RETURNS TABLE(Id INT, Name VARCHAR, Capacity INT)
LANGUAGE SQL
AS $$
	SELECT MR.Id, MR.Name, MR.Capacity
	FROM Movie_Theater as MT
	INNER JOIN Movie_room AS MR ON MR.Id_movie_theater = MT.Id
	WHERE MT.Id = movie_theater
$$;
--Drop Function usp_movie_room
--Select * from usp_movie_room(4)

----------------------------------------------------------------------------------------------
--STORED PROCEDURE SCREENING WITH PRICE
----------------------------------------------------------------------------------------------
CREATE FUNCTION usp_screening_with_cinema(IDF INTEGER, NUM INTEGER)
RETURNS TABLE(NAME VARCHAR, ROOM VARCHAR, HOUR TIME, DATE DATE, PRICE INT)
LANGUAGE SQL
AS $$
	SELECT M.ORIGINAL_NAME, MR.NAME, S.HOUR, S.DATE, S.PRICE*NUM
	FROM PROJECTION AS S 
	INNER JOIN MOVIE AS M ON M.ID = S.ID_MOVIE
	INNER JOIN MOVIE_ROOM AS MR ON MR.ID = S.ID_MOVIE_ROOM
	WHERE S.ID = IDF
$$;
--Drop Function usp_screening_with_cinema()
--Select * from usp_screening_with_cinema(1, 3)

----------------------------------------------------------------------------------------------
--STORED PROCEDURE ACTIVE PROJECTIONS
----------------------------------------------------------------------------------------------
CREATE FUNCTION usp_active_projections(movie_id integer, movie_theater_id integer)
RETURNS TABLE(Id_projection INT, Hour_projection TIME, Date_projection DATE, Price_projection INT, Id_movie_room INT) 
LANGUAGE SQL
AS $$
	SELECT P.Id, P.Hour, P.Date, P.Price, P.Id_movie_room
	FROM Movie_Theater AS MT
	INNER JOIN Movie_Room AS MR ON MR.Id_movie_theater = MT.Id
	INNER JOIN Projection AS P ON P.Id_movie_room = MR.Id
	INNER JOIN Movie AS M ON M.Id = P.Id_movie
	WHERE (MT.Id = movie_theater_id ) AND (M.Id = movie_id) AND ((SELECT CURRENT_DATE) >=  P.Date)
$$;
--Drop Function usp_active_projections
--Select * from usp_active_projections(1,1)

----------------------------------------------------------------------------------------------
--STORED PROCEDURE MAKE SEATS 40
----------------------------------------------------------------------------------------------
CREATE FUNCTION usp_make_seats_40(room_id integer)
RETURNS VOID
LANGUAGE SQL
AS $$
	INSERT INTO Seat(Rows, Columns, Id_movie_room) VALUES
	(1,1, room_id),	
	(1,2, room_id),
	(1,3, room_id),
	(1,4, room_id),
	(1,5, room_id),
	(1,6, room_id),
	(1,7, room_id),
	(1,8, room_id),	
	(2,1, room_id),	
	(2,2, room_id),
	(2,3, room_id),
	(2,4, room_id),
	(2,5, room_id),
	(2,6, room_id),
	(2,7, room_id),
	(2,8, room_id),	
	(3,1, room_id),	
	(3,2, room_id),
	(3,3, room_id),
	(3,4, room_id),
	(3,5, room_id),
	(3,6, room_id),
	(3,7, room_id),
	(3,8, room_id),
	(4,1, room_id),	
	(4,2, room_id),
	(4,3, room_id),
	(4,4, room_id),
	(4,5, room_id),
	(4,6, room_id),
	(4,7, room_id),
	(4,8, room_id),	
	(5,1, room_id),	
	(5,2, room_id),
	(5,3, room_id),
	(5,4, room_id),
	(5,5, room_id),
	(5,6, room_id),
	(5,7, room_id),
	(5,8, room_id)
$$;
--Drop Function usp_make_seats_40
--Select * from usp_make_seats_40(7)
	
----------------------------------------------------------------------------------------------
--STORED PROCEDURE MAKE SEATS 60
----------------------------------------------------------------------------------------------
CREATE FUNCTION usp_make_seats_60(room_id integer)
RETURNS VOID
LANGUAGE SQL
AS $$
	INSERT INTO Seat(Rows, Columns, Id_movie_room) VALUES
	(1,1,room_id),	
	(1,2,room_id),
	(1,3,room_id),
	(1,4,room_id),
	(1,5,room_id),
	(1,6,room_id),
	(1,7,room_id),
	(1,8,room_id),	
	(2,1,room_id),	
	(2,2,room_id),
	(2,3,room_id),
	(2,4,room_id),
	(2,5,room_id),
	(2,6,room_id),
	(2,7,room_id),
	(2,8,room_id),	
	(3,1,room_id),	
	(3,2,room_id),
	(3,3,room_id),
	(3,4,room_id),
	(3,5,room_id),
	(3,6,room_id),
	(3,7,room_id),
	(3,8,room_id),
	(4,1,room_id),	
	(4,2,room_id),
	(4,3,room_id),
	(4,4,room_id),
	(4,5,room_id),
	(4,6,room_id),
	(4,7,room_id),
	(4,8,room_id),	
	(5,1,room_id),	
	(5,2,room_id),
	(5,3,room_id),
	(5,4,room_id),
	(5,5,room_id),
	(5,6,room_id),
	(5,7,room_id),
	(5,8,room_id),	
	(6,1,room_id),	
	(6,2,room_id),
	(6,3,room_id),
	(6,4,room_id),
	(6,5,room_id),
	(6,6,room_id),
	(6,7,room_id),
	(6,8,room_id),
	(7,1,room_id),	
	(7,2,room_id),
	(7,3,room_id),
	(7,4,room_id),
	(7,5,room_id),
	(7,6,room_id),
	(7,7,room_id),
	(7,8,room_id),
	(8,3,room_id),
	(8,4,room_id),
	(8,5,room_id),
	(8,6,room_id)
$$;
--Drop Function usp_make_seats_60
--Select * from usp_make_seats_60(9)
	







